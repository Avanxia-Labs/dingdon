'use client';

import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import HttpBackend from 'i18next-http-backend';

// Lista de idiomas soportados - Solo ingl√©s y espa√±ol activos por ahora
export const SUPPORTED_LANGUAGES = [
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
  // Idiomas para implementar despu√©s:
  // { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  // { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  // { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
  // { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
  // { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
  // { code: 'it', name: 'Italiano', flag: 'üáÆüáπ' },
  // { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
  // { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  // { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
  // { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  // { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
  // { code: 'nl', name: 'Nederlands', flag: 'üá≥üá±' },
  // { code: 'sv', name: 'Svenska', flag: 'üá∏üá™' },
  // { code: 'da', name: 'Dansk', flag: 'üá©üá∞' },
  // { code: 'no', name: 'Norsk', flag: 'üá≥üá¥' },
  // { code: 'fi', name: 'Suomi', flag: 'üá´üáÆ' },
  // { code: 'pl', name: 'Polski', flag: 'üáµüá±' },
  // { code: 'cs', name: 'ƒåe≈°tina', flag: 'üá®üáø' },
  // { code: 'hu', name: 'Magyar', flag: 'üá≠üá∫' },
  // { code: 'ro', name: 'Rom√¢nƒÉ', flag: 'üá∑üá¥' },
  // { code: 'el', name: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', flag: 'üá¨üá∑' },
  // { code: 'he', name: '◊¢◊ë◊®◊ô◊™', flag: 'üáÆüá±' },
  // { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' },
  // { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
  // { code: 'id', name: 'Bahasa Indonesia', flag: 'üáÆüá©' },
  // { code: 'ms', name: 'Bahasa Melayu', flag: 'üá≤üáæ' },
  // { code: 'tl', name: 'Filipino', flag: 'üáµüá≠' },
  // { code: 'uk', name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
  // { code: 'bg', name: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', flag: 'üáßüá¨' },
  // { code: 'hr', name: 'Hrvatski', flag: 'üá≠üá∑' },
  // { code: 'sr', name: '–°—Ä–ø—Å–∫–∏', flag: 'üá∑üá∏' },
  // { code: 'sk', name: 'Slovenƒçina', flag: 'üá∏üá∞' },
  // { code: 'sl', name: 'Sloven≈°ƒçina', flag: 'üá∏üáÆ' },
  // { code: 'et', name: 'Eesti', flag: 'üá™üá™' },
  // { code: 'lv', name: 'Latvie≈°u', flag: 'üá±üáª' },
  // { code: 'lt', name: 'Lietuvi≈≥', flag: 'üá±üáπ' },
  // { code: 'ca', name: 'Catal√†', flag: 'üè¥Û†Å•Û†Å≥Û†Å£Û†Å¥Û†Åø' },
  // { code: 'eu', name: 'Euskera', flag: 'üè¥Û†Å•Û†Å≥Û†Å∞Û†Å∂Û†Åø' },
  // { code: 'gl', name: 'Galego', flag: 'üè¥Û†Å•Û†Å≥Û†ÅßÛ†Å°Û†Åø' }
];

// Solo usar c√≥digos de idiomas que est√°n soportados
const SUPPORTED_LANGUAGE_CODES = SUPPORTED_LANGUAGES.map(lang => lang.code);

// Funci√≥n para detectar idioma del navegador
const detectBrowserLanguage = (): string => {
  if (typeof window === 'undefined') return 'en';
  
  // Intentar diferentes fuentes de detecci√≥n
  const sources = [
    () => localStorage.getItem('i18nextLng'),
    () => navigator.language,
    () => (navigator as any).userLanguage,
    () => document.documentElement.lang,
    () => 'en' // fallback final
  ];
  
  for (const source of sources) {
    try {
      const detected = source();
      if (detected) {
        // Simplificar el c√≥digo de idioma (ej: en-US -> en)
        const simplified = detected.split('-')[0].toLowerCase();
        
        // Si est√° soportado, usarlo
        if (SUPPORTED_LANGUAGE_CODES.includes(simplified)) {
          return simplified;
        }
      }
    } catch (error) {
      // Continuar con la siguiente fuente si hay error
      continue;
    }
  }
  
  return 'en'; // fallback final
};

// Solo inicializar si estamos en el navegador
if (typeof window !== 'undefined') {
  const initialLanguage = detectBrowserLanguage();
  
  i18n
    .use(HttpBackend)
    .use(initReactI18next)
    .init({
      // Idioma inicial detectado
      lng: initialLanguage,
      fallbackLng: 'en', // Idioma de respaldo
      
      // Lista de idiomas soportados
      supportedLngs: SUPPORTED_LANGUAGE_CODES,
      
      // No cargar idiomas no soportados
      nonExplicitSupportedLngs: false,
      
      // Namespaces
      ns: ['translation'],
      defaultNS: 'translation',
      
      // Backend configuration
      backend: {
        loadPath: '/locales/{{lng}}/translation.json',
        
        // Reintentos si falla la carga
        requestOptions: {
          cache: 'default', // Usar cache del navegador
        },
        
        // Opciones de error
        allowMultiLoading: false,
      },
      
      // Configuraci√≥n de interpolaci√≥n
      interpolation: {
        escapeValue: false, // React ya se encarga de la protecci√≥n contra XSS
      },
      
      // Configuraci√≥n de desarrollo
      debug: process.env.NODE_ENV === 'development',
      
      // Configuraci√≥n de carga
      load: 'languageOnly', // Solo cargar idioma sin regi√≥n (en lugar de en-US)
      
      // Configuraci√≥n de actualizaci√≥n
      updateMissing: false, // No enviar claves faltantes al backend
      
      // Configuraci√≥n de recursos
      partialBundledLanguages: true, // Permitir carga parcial
      
      // Configuraci√≥n de cache
      initImmediate: false, // No esperar a que se carguen todos los recursos
      
      // Configuraci√≥n de reactividad
      react: {
        useSuspense: true, // Usar Suspense para la carga
        bindI18n: 'languageChanged loaded',
        bindI18nStore: 'added removed',
        transEmptyNodeValue: '', // Valor para nodos vac√≠os
        transSupportBasicHtmlNodes: true, // Soporte b√°sico para HTML
        transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'em', 'b', 'u'], // Tags HTML permitidos
      }
    });
}

export default i18n;




// // app/i18n.ts

// 'use client'; // Es una buena pr√°ctica a√±adir esto tambi√©n aqu√≠

// import i18n from 'i18next';
// import { initReactI18next } from 'react-i18next';
// import HttpBackend from 'i18next-http-backend';

// // --- LA SOLUCI√ìN DEFINITIVA ---
// // Solo inicializamos i18next si estamos en un entorno de navegador.
// // Esto evita que se ejecute durante el build del servidor de Next.js.
// if (typeof window !== 'undefined') {
//   i18n
//     .use(HttpBackend)
//     .use(initReactI18next)
//     .init({
//       lng: 'en', // Idioma por defecto
//       fallbackLng: 'en', // Idioma de respaldo si el actual no est√° disponible
//       ns: ['translation'],
//       defaultNS: 'translation',
//       backend: {
//         loadPath: '/locales/{{lng}}/translation.json', // Ruta simplificada
//       },
//       interpolation: {
//         escapeValue: false, // React ya se encarga de la protecci√≥n contra XSS
//       },
//     });
// }

// export default i18n;